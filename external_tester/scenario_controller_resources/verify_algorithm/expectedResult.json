{
    "verifiedSuccessfully": false,
    "detailsMessage": "One or more counter examples found.",
    "uppaalModel": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n        <!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>\n<nta>\n    <declaration>\n        //***********************************************************************************************************\n        //Do not change\n        const int END_TIME = 1;\n        const int START_TIME = 0;\n\n        //Is the stepFinder active\n        bool stepFinderActive := false;\n\n        //We need to run an extra iteration of the stepFinder and loopSolver with all checks activated\n        // once the loop has converged\n        bool isLoopExtraIteration := false;\n        bool isStepExtraIteration := false;\n\n        //These is simply to keep track of which loop is the inner one - in case of nested loops\n        bool isLoopNested := false;\n        bool isStepNested := false;\n\n        //Active loop - if it is different form -1, we are in the middle of solving an algebraic loop\n        int loopActive := -1;\n\n        //Used in Trace Visualization\n        int isInit := 0;\n        int isSimulation := 0;\n\n        bool checksDisabled = false;\n\n\n        //In case of a scenario with algebraic loops and step rejection,\n        // we need to be able to turn off the precondition checks\n        bool shouldChecksBeDisabled(){\n\n        //In case a loop is not activated all checks should be\n        if(loopActive == -1 &amp;&amp; !stepFinderActive){\n        return false;\n        }\n\n        //We are inside a loop is it nested\n        if(isLoopNested || isStepNested){\n        //Both loops should be on the extraIteration\n        return !(isStepExtraIteration &amp;&amp; isLoopExtraIteration);\n        }\n\n        //Not nested - if none of the loops is in the extra iteration we should disable the checks\n        if(!isLoopExtraIteration &amp;&amp; !isStepExtraIteration){\n        return true;\n        }\n\n        return false;\n        }\n\n        //FMU of a variable\n        const int undefined := 0;\n        const int defined := 1;\n        const int notStable :=-1;\n\n        //FMU of the variable\n        typedef struct {\n        int[-1,1] status;\n        int time;\n        } variable;\n\n\n        //Const assignment types - to future variables or current:\n        const int final := 0;\n        const int tentative := 1;\n        const int noCommitment := -1;\n\n        //***********************************************************************************************************\n\n        //Max number of inputs/outputs any FMU can have - Should be changed\n        const int MaxNInputs = 2;\n        const int MaxNOutputs = 2;\n\n        //Numbers of FMUs in scenario - Should be changed\n        const int nFMU = 3;\n\n        //number of algebraic loops in scenario - Should be changed\n        const int nAlgebraicLoopsInInit := 1;\n        const int nAlgebraicLoopsInStep := 1;\n\n        //***********************************************************************************************************\n        //Do not change\n\n        const int NActions := 14;\n\n        //The number of actions in our system\n        const int N := MaxNInputs &gt; MaxNOutputs? MaxNInputs : MaxNOutputs;\n\n        //The maximum step allowed in system - shouldn't be changed\n        const int H_max := 3;\n        const int H := H_max;\n\n        const int noStep := -1;\n        const int noFMU := -1;\n        const int noLoop := -1;\n\n        typedef struct {\n            int[-1, nFMU] FMU;\n            int[-1,NActions] act;\n            int[-1,N] portVariable;\n            int[-1,H] step_size;\n            int[-1,nFMU] relative_step_size;\n            int[-1,1] commitment;\n            int[-1, nAlgebraicLoopsInStep] loop;\n        } Operation;\n\n        typedef struct {\n            int[-1,nFMU] FMU;\n            int[-1, MaxNInputs] input;\n            int[-1, MaxNOutputs] output;\n        } InternalConnection;\n\n        //Types of input ports\n        const int delayed := 0;\n        const int reactive := 1;\n        const int noPort := -1;\n\n        typedef struct {\n            int[0, nFMU] SrcFMU;\n            int[0,MaxNOutputs] output;\n            int[0,nFMU] TrgFMU;\n            int[0,MaxNInputs] input;\n        } ExternalConnection;\n\n        typedef struct {\n            int[-1,nFMU] FMU;\n            int[-1, MaxNOutputs] port;\n        } FmuOutputPort;\n\n\n        //The action dictates which action will be executed\n        const int noOp := -1;\n        const int get := 0;\n        const int set := 1;\n        const int step := 2;\n        const int save := 3;\n        const int restore := 4;\n        const int setParameter := 5;\n        const int instantiate := 6;\n        const int enterInitialization := 7;\n        const int exitInitialization := 8;\n        const int loop := 9;\n        const int findStep := 10;\n        const int setupExperiment := 11;\n        const int unload := 12;\n        const int terminate := 13;\n        const int freeInstance := 14;\n\n        int[-1,NActions] action;\n\n        //The activeFMU variable dictates which FMU is enabled - which FMU should take an action\n        int[-1, nFMU] activeFMU = 0;\n\n        //Channels\n        //A channel to invoke an FMU-action from the Interpreter, StepFinder, LoopSolver\n        chan fmu[nFMU];\n\n        //A channel for all actions - I can use fewer channels and use the actions to distinguish\n        broadcast chan actionPerformed;\n\n        //A channel to start the stepFinder\n        chan findStepChan;\n\n        //Channel to start and finish LoopSolver\n        chan solveLoop;\n\n        //Channel to start and finish LoopSolver for Init\n        chan solveLoopInit;\n\n        //A broadcase channel for an FMU to signal an error\n        chan ErrorChan;\n\n        //The fmu-variable that is updated by the action\n        int [-1,N] var = 0;\n        //The variable that is being get or set (either the current or future time) by the action\n        int [-1,1] commitment = 0;\n        //The stepsize of the step action\n        int [-1, H_max] stepsize = 0;\n        int [-1, nFMU] relative_step_size = 0;\n\n        const int end = END_TIME;\n        int time = START_TIME;\n\n        //Counters to track the current FMU of the co-simulation\n        int fmusUnloaded = 0;\n\n        //***********************************************************************************************************\n        //Scenario Dependent - Should be changed!\n\n        //Number of internal connections - both init and normal\n        const int nInternal := 2;\n        const int nInternalInit := 2;\n\n        //Number of external connections in scenario\n        const int nExternal := 4;\n\n        //The initial of value of h\n        int h := H_max;\n\n        //This array is representing the variables of the stepSize that each FMU can take - H_max is the default value\n        int stepVariables[nFMU] = {H_max,H_max,H_max};\n\n        //A generic action to pick the next action\n        void unpackOperation(Operation operation){\n            //action to be performed\n            action := operation.act;\n            //fmu to perform the action\n            activeFMU := operation.FMU;\n            //The variable involved\n            var := operation.portVariable;\n            //The Stepsize\n            stepsize := operation.step_size;\n            //The Stepsize\n            relative_step_size := operation.relative_step_size;\n            //The commitment\n            commitment := operation.commitment;\n            if(loopActive == noLoop){\n                loopActive := operation.loop;\n            }\n            if(action == step){\n                if (stepsize == noStep) {\n                    // Step is relative to the fmu referred to by relative_step_size\n                    stepsize := stepVariables[relative_step_size];\n                } else if (stepsize == H) {\n                    // Default step\n                    stepsize := h;\n                } else {\n                    // Absolute step size\n                    // Nothing to do.\n                }\n            }\n            //Update checkStatus\n            checksDisabled = shouldChecksBeDisabled();\n        }\n\n\n        //Encoding of the scenario\n        //Each FMU should have a different ID \\in [0, nFMU-1]\n        \n        const int msd2 := 0;\n        \n        const int msd1 := 1;\n        \n        const int msd3 := 2;\n        \n\n        //Number of inputs and outputs of each FMU\n        \n        const int msd2_input := 2;\n        const int msd2_output := 1;\n        \n        const int msd1_input := 1;\n        const int msd1_output := 2;\n        \n        const int msd3_input := 1;\n        const int msd3_output := 0;\n        \n\n        //Definition of inputs and outputs of each FMU\n        \n        // msd2 inputs - 2\n        \n        const int msd2_x1 := 0;\n        \n        const int msd2_v1 := 1;\n        \n        // msd2 outputs - 1\n        \n        const int msd2_fk := 0;\n        \n        const int msd2_inputTypes[MaxNInputs] := { reactive,reactive };\n        \n        // msd1 inputs - 1\n        \n        const int msd1_fk := 0;\n        \n        // msd1 outputs - 2\n        \n        const int msd1_x1 := 0;\n        \n        const int msd1_v1 := 1;\n        \n        const int msd1_inputTypes[MaxNInputs] := { delayed,noPort };\n        \n        // msd3 inputs - 1\n        \n        const int msd3_fk := 0;\n        \n        // msd3 outputs - 0\n        \n        const int msd3_inputTypes[MaxNInputs] := { delayed,noPort };\n        \n\n        //This array is to keep track of the value of each output port - each output port needs two variables (current and future)\n        // and each variable is having two values (defined and time)\n        variable connectionVariable[nFMU][MaxNOutputs][2] = { {{{undefined,0}, {undefined,0}},{{undefined,0}, {undefined,0}}},{{{undefined,0}, {undefined,0}},{{undefined,0}, {undefined,0}}},{{{undefined,0}, {undefined,0}},{{undefined,0}, {undefined,0}}} };\n\n        //Connections - do not longer contain the type of the input - but it is still a 1:1 mapping\n        const ExternalConnection external[nExternal] = { {msd1, msd1_x1, msd2, msd2_x1},{msd1, msd1_v1, msd2, msd2_v1},{msd2, msd2_fk, msd1, msd1_fk},{msd2, msd2_fk, msd3, msd3_fk} };\n\n        const InternalConnection feedthroughInStep[nInternal] = { {msd2, msd2_x1, msd2_fk},{msd2, msd2_v1, msd2_fk} };\n\n        //The initial internal connection could be different from the connection in the simulation and should be represented differently\n        const InternalConnection feedthroughInInit[nInternalInit] = { {msd2, msd2_x1, msd2_fk},{msd2, msd2_v1, msd2_fk} };\n\n        //The array show if an FMU can reject a step or not - if the FMU can reject a step the value is 1 on the index defined by the fmus\n        const bool mayRejectStep[nFMU] = { false,true,false };\n\n        //Numbers of operations in each step\n        const int nInstantiationOperations := 6;\n        const int nInitializationOperations := 13;\n        const int nStepOperations := 10;\n        const int nTerminationOperations := 9;\n\n        // Numbers for algebraic loop operations in init\n        const int maxNAlgebraicLoopOperationsInInit := 1;\n        const int maxNConvergeOperationsForAlgebraicLoopsInInit := 1;\n\n        //Numbers of operations to be performed per algebraic loop in init\n        const int[0,maxNConvergeOperationsForAlgebraicLoopsInInit] nConvergencePortsPerAlgebraicLoopInInit[nAlgebraicLoopsInInit] = {0};\n        const int[0,maxNAlgebraicLoopOperationsInInit] nOperationsPerAlgebraicLoopInInit[nAlgebraicLoopsInInit] = {0};\n\n\n        // Number of operations in the step finding loop\n        const int nFindStepOperations := 1;\n        const int nRestore := 1;\n\n        // Numbers for algebraic loop operations in step\n        const int maxNAlgebraicLoopOperationsInStep := 1;\n        const int maxNRetryOperationsForAlgebraicLoopsInStep := 1;\n        const int maxNConvergeOperationsForAlgebraicLoopsInStep := 1;\n\n        //Numbers of operations to be performed per algebraic loop in step\n        const int[0,maxNConvergeOperationsForAlgebraicLoopsInStep] nConvergencePortsPerAlgebraicLoopInStep[nAlgebraicLoopsInStep] = {0};\n        const int[0,maxNAlgebraicLoopOperationsInStep] nOperationsPerAlgebraicLoopInStep[nAlgebraicLoopsInStep] = {0};\n        const int[0,maxNRetryOperationsForAlgebraicLoopsInStep] nRetryOperationsPerAlgebraicLoopInStep[nAlgebraicLoopsInStep] = {0};\n\n        //These operations define what should be performed in the simulation - it is assumed that the operation first loads the fmus\n        const Operation instantiationOperations[nInstantiationOperations] = { {msd2, instantiate, noPort, noStep, noFMU, noCommitment, noLoop},{msd1, instantiate, noPort, noStep, noFMU, noCommitment, noLoop},{msd3, instantiate, noPort, noStep, noFMU, noCommitment, noLoop},{msd2, setupExperiment, noPort, noStep, noFMU, noCommitment, noLoop},{msd1, setupExperiment, noPort, noStep, noFMU, noCommitment, noLoop},{msd3, setupExperiment, noPort, noStep, noFMU, noCommitment, noLoop} };\n\n        const Operation initializationOperations[nInitializationOperations] = { {msd2, enterInitialization, noPort, noStep, noFMU, noCommitment, noLoop},{msd1, enterInitialization, noPort, noStep, noFMU, noCommitment, noLoop},{msd3, enterInitialization, noPort, noStep, noFMU, noCommitment, noLoop},{msd1, get, msd1_x1, noStep, noFMU, final, noLoop},{msd2, set, msd2_x1, noStep, noFMU, final, noLoop},{msd1, get, msd1_v1, noStep, noFMU, final, noLoop},{msd2, set, msd2_v1, noStep, noFMU, final, noLoop},{msd2, get, msd2_fk, noStep, noFMU, final, noLoop},{msd1, set, msd1_fk, noStep, noFMU, final, noLoop},{msd3, set, msd3_fk, noStep, noFMU, final, noLoop},{msd2, exitInitialization, noPort, noStep, noFMU, noCommitment, noLoop},{msd1, exitInitialization, noPort, noStep, noFMU, noCommitment, noLoop},{msd3, exitInitialization, noPort, noStep, noFMU, noCommitment, noLoop} };\n\n        const Operation stepOperations[nStepOperations] = { {msd1, step, noPort, H, noFMU, noCommitment, noLoop},{msd3, step, noPort, H, noFMU, noCommitment, noLoop},{msd1, get, msd1_x1, noStep, noFMU, final, noLoop},{msd2, set, msd2_x1, noStep, noFMU, final, noLoop},{msd1, get, msd1_v1, noStep, noFMU, final, noLoop},{msd2, set, msd2_v1, noStep, noFMU, final, noLoop},{msd2, step, noPort, H, noFMU, noCommitment, noLoop},{msd2, get, msd2_fk, noStep, noFMU, final, noLoop},{msd1, set, msd1_fk, noStep, noFMU, final, noLoop},{msd3, set, msd3_fk, noStep, noFMU, final, noLoop} };\n\n        //These are the operations to be performed in order to find the correct step\n        //In these operation there is a difference on the third parameter to doStep:\n        // H (A step-value greater than the allowed step (Greater than the number of FMUS)) means that we should look at the variable h\n        // A stepSize (0:(nFMU-1)) means that the should look at that index in stepVariables use that as the step\n        //This is being done inside - findStepAction\n\n        const Operation findStepIteration[nFindStepOperations] = { {noFMU, noOp, noPort, noStep, noFMU, noCommitment, noLoop} };\n        const Operation StepFix[nRestore] = { {noFMU, noOp, noPort, noStep, noFMU, noCommitment, noLoop} };\n\n        //Possible multiple loops\n        //Loop operations are to solve algebraic loops in the co-simulation scenario\n        const Operation operationsPerAlgebraicLoopInStep[nAlgebraicLoopsInStep][maxNAlgebraicLoopOperationsInStep] = {{ {noFMU, noOp, noPort, noStep, noFMU, noCommitment, noLoop} } };\n        const Operation operationsPerAlgebraicLoopInInit[nAlgebraicLoopsInInit][maxNAlgebraicLoopOperationsInInit] = {{ {noFMU, noOp, noPort, noStep, noFMU, noCommitment, noLoop} } };\n\n        //The converge ports is to mark which variables that needs to be checked in the convergence loop\n        //The convention is now to specify the FMU first and the port to denote the variables that should be checked\n        const FmuOutputPort convergencePortsPerAlgebraicLoopInStep[nAlgebraicLoopsInStep][maxNConvergeOperationsForAlgebraicLoopsInStep] = {{ { noFMU, noPort} } };\n        const FmuOutputPort convergencePortsPerAlgebraicLoopInInit[nAlgebraicLoopsInInit][maxNConvergeOperationsForAlgebraicLoopsInInit] = {{ { noFMU, noPort} } };\n\n        const Operation retryOperationsPerAlgebraicLoopInStep[nAlgebraicLoopsInStep][maxNRetryOperationsForAlgebraicLoopsInStep] = {{ {noFMU, noOp, noPort, noStep, noFMU, noCommitment, noLoop} } };\n\n        const Operation terminationOperations[nTerminationOperations] = { {msd2, terminate, noPort, noStep, noFMU, noCommitment, noLoop},{msd1, terminate, noPort, noStep, noFMU, noCommitment, noLoop},{msd3, terminate, noPort, noStep, noFMU, noCommitment, noLoop},{msd2, freeInstance, noPort, noStep, noFMU, noCommitment, noLoop},{msd1, freeInstance, noPort, noStep, noFMU, noCommitment, noLoop},{msd3, freeInstance, noPort, noStep, noFMU, noCommitment, noLoop},{msd2, unload, noPort, noStep, noFMU, noCommitment, noLoop},{msd1, unload, noPort, noStep, noFMU, noCommitment, noLoop},{msd3, unload, noPort, noStep, noFMU, noCommitment, noLoop} };\n\n    </declaration>\n    <template>\n        <name>Interpreter</name>\n        <declaration>\n            int inst_pc := 0;\n            int init_pc := 0;\n            int cosimstep_pc := 0;\n            int terminate_pc := 0;\n            int n := 0;\n\n            void selectNextInstAction(){\n            unpackOperation(instantiationOperations[inst_pc]);\n            //Proceed to next action\n            inst_pc++;\n            }\n\n            void selectNextInitAction(){\n            unpackOperation(initializationOperations[init_pc]);\n            //Proceed to next action\n            init_pc++;\n            }\n\n\n            void selectNextCosimStepAction(){\n            if(cosimstep_pc &lt; nStepOperations){\n            unpackOperation(stepOperations[cosimstep_pc]);\n            }\n            //Proceed to next action\n            cosimstep_pc++;\n            }\n\n            void findFMUTerminateAction(){\n            unpackOperation(terminationOperations[terminate_pc]);\n            //Proceed to next action\n            terminate_pc++;\n            }\n\n            void takeStep(int global_h){\n            //h is progression of time\n            time := time + h;\n            //Reset the loop actions\n            cosimstep_pc := 0;\n            //reset the global stepsize\n            h := global_h;\n            //reset n\n            n := 0;\n            }\n\n            void setStepsizeFMU(int fmu, int fmu_step_size){\n            if(mayRejectStep[fmu]){\n            //If an FMU can reject a Step it is maximum step should be updated in each iteration\n            stepVariables[fmu] = fmu_step_size;\n            }else{\n            //If not just set its maximum step to the global step\n            stepVariables[fmu] = h;\n            }\n            n++;\n            }\n        </declaration>\n        <location id=\"id7\" x=\"569\" y=\"34\">\n        </location>\n        <location id=\"id8\" x=\"1113\" y=\"-102\">\n            <committed/>\n        </location>\n        <location id=\"id9\" x=\"841\" y=\"-102\">\n        </location>\n        <location id=\"id10\" x=\"2176\" y=\"-127\">\n            <name x=\"2227\" y=\"-152\">Error</name>\n        </location>\n        <location id=\"id11\" x=\"2048\" y=\"25\">\n            <name x=\"1988\" y=\"68\">SolveAlgebraicLoop</name>\n        </location>\n        <location id=\"id12\" x=\"2065\" y=\"-221\">\n            <name x=\"2055\" y=\"-255\">FindStep</name>\n        </location>\n        <location id=\"id13\" x=\"1351\" y=\"-102\">\n            <name x=\"1325\" y=\"-144\">CosimStep</name>\n            <committed/>\n        </location>\n        <location id=\"id14\" x=\"1521\" y=\"-425\">\n            <name x=\"1427\" y=\"-484\">NormalFMUAction</name>\n        </location>\n        <location id=\"id15\" x=\"561\" y=\"416\">\n            <name x=\"578\" y=\"408\">Terminated</name>\n        </location>\n        <location id=\"id16\" x=\"561\" y=\"272\">\n            <committed/>\n        </location>\n        <location id=\"id17\" x=\"952\" y=\"272\">\n            <name x=\"944\" y=\"306\">Termination</name>\n            <committed/>\n        </location>\n        <location id=\"id18\" x=\"1674\" y=\"-102\">\n            <name x=\"1691\" y=\"-68\">Simulate</name>\n            <committed/>\n        </location>\n        <location id=\"id19\" x=\"569\" y=\"-102\">\n            <committed/>\n        </location>\n        <location id=\"id20\" x=\"339\" y=\"-102\">\n            <name x=\"501\" y=\"-357\">Initialization</name>\n            <committed/>\n        </location>\n        <location id=\"id21\" x=\"-174\" y=\"-102\">\n            <name x=\"-139\" y=\"-340\">instantiationOperations</name>\n            <committed/>\n        </location>\n        <location id=\"id22\" x=\"107\" y=\"-102\">\n        </location>\n        <location id=\"id23\" x=\"-459\" y=\"-102\">\n            <name x=\"-469\" y=\"-136\">Start</name>\n            <committed/>\n        </location>\n        <init ref=\"id23\"/>\n        <transition>\n            <source ref=\"id7\"/>\n            <target ref=\"id19\"/>\n            <label kind=\"synchronisation\" x=\"654\" y=\"-34\">solveLoopInit?</label>\n            <nail x=\"646\" y=\"-34\"/>\n        </transition>\n        <transition>\n            <source ref=\"id19\"/>\n            <target ref=\"id7\"/>\n            <label kind=\"guard\" x=\"382\" y=\"-17\">action == loop</label>\n            <label kind=\"synchronisation\" x=\"408\" y=\"-59\">solveLoopInit!</label>\n            <nail x=\"493\" y=\"-25\"/>\n        </transition>\n        <transition>\n            <source ref=\"id8\"/>\n            <target ref=\"id8\"/>\n            <label kind=\"select\" x=\"1020\" y=\"-306\">step_fmu:int[1,H_max]</label>\n            <label kind=\"guard\" x=\"1037\" y=\"-289\">n &lt; nFMU</label>\n            <label kind=\"assignment\" x=\"1011\" y=\"-272\">setStepsizeFMU(n, step_fmu)</label>\n            <nail x=\"1003\" y=\"-246\"/>\n            <nail x=\"1198\" y=\"-246\"/>\n        </transition>\n        <transition>\n            <source ref=\"id8\"/>\n            <target ref=\"id13\"/>\n            <label kind=\"guard\" x=\"1181\" y=\"-136\">n == nFMU</label>\n        </transition>\n        <transition>\n            <source ref=\"id18\"/>\n            <target ref=\"id8\"/>\n            <label kind=\"select\" x=\"1377\" y=\"51\">global_h:int[1,H_max]</label>\n            <label kind=\"guard\" x=\"1079\" y=\"34\">cosimstep_pc == nStepOperations + 1\n                &amp;&amp; time &lt; end\n            </label>\n            <label kind=\"assignment\" x=\"1470\" y=\"17\">takeStep(global_h), isSimulation= 0</label>\n            <nail x=\"1351\" y=\"34\"/>\n        </transition>\n        <transition>\n            <source ref=\"id9\"/>\n            <target ref=\"id8\"/>\n            <label kind=\"guard\" x=\"859\" y=\"-136\">init_pc == nInitializationOperations</label>\n            <label kind=\"synchronisation\" x=\"859\" y=\"-119\">actionPerformed?</label>\n            <label kind=\"assignment\" x=\"858\" y=\"-85\">isInit = 0</label>\n        </transition>\n        <transition>\n            <source ref=\"id9\"/>\n            <target ref=\"id19\"/>\n            <label kind=\"guard\" x=\"586\" y=\"-314\">init_pc &lt; nInitializationOperations</label>\n            <label kind=\"synchronisation\" x=\"587\" y=\"-297\">actionPerformed?</label>\n            <label kind=\"assignment\" x=\"586\" y=\"-280\">selectNextInitAction()</label>\n            <nail x=\"841\" y=\"-280\"/>\n            <nail x=\"569\" y=\"-280\"/>\n        </transition>\n        <transition>\n            <source ref=\"id19\"/>\n            <target ref=\"id9\"/>\n            <label kind=\"guard\" x=\"603\" y=\"-204\">action == get ||\n                action == set ||\n                action == exitInitialization ||\n                action == enterInitialization\n            </label>\n            <label kind=\"synchronisation\" x=\"587\" y=\"-123\">fmu[activeFMU]!</label>\n        </transition>\n        <transition>\n            <source ref=\"id20\"/>\n            <target ref=\"id19\"/>\n            <label kind=\"assignment\" x=\"357\" y=\"-102\">selectNextInitAction(), isInit = 1</label>\n        </transition>\n        <transition>\n            <source ref=\"id22\"/>\n            <target ref=\"id20\"/>\n            <label kind=\"guard\" x=\"127\" y=\"-136\">inst_pc == nInstantiationOperations</label>\n            <label kind=\"synchronisation\" x=\"135\" y=\"-119\">actionPerformed?</label>\n        </transition>\n        <transition>\n            <source ref=\"id11\"/>\n            <target ref=\"id10\"/>\n            <label kind=\"synchronisation\" x=\"1980\" y=\"-17\">ErrorChan?</label>\n            <nail x=\"2176\" y=\"25\"/>\n        </transition>\n        <transition>\n            <source ref=\"id12\"/>\n            <target ref=\"id10\"/>\n            <label kind=\"synchronisation\" x=\"2065\" y=\"-255\">ErrorChan?</label>\n            <nail x=\"2176\" y=\"-221\"/>\n        </transition>\n        <transition>\n            <source ref=\"id11\"/>\n            <target ref=\"id18\"/>\n            <label kind=\"synchronisation\" x=\"1784\" y=\"-26\">solveLoop?</label>\n            <label kind=\"assignment\" x=\"1801\" y=\"8\">selectNextCosimStepAction()</label>\n        </transition>\n        <transition>\n            <source ref=\"id18\"/>\n            <target ref=\"id11\"/>\n            <label kind=\"guard\" x=\"1903\" y=\"-93\">loopActive != -1\n                &amp;&amp; action == loop\n            </label>\n            <label kind=\"synchronisation\" x=\"1818\" y=\"-127\">solveLoop!</label>\n            <nail x=\"2065\" y=\"-110\"/>\n        </transition>\n        <transition>\n            <source ref=\"id12\"/>\n            <target ref=\"id18\"/>\n            <label kind=\"synchronisation\" x=\"1861\" y=\"-416\">findStepChan?</label>\n            <label kind=\"assignment\" x=\"1861\" y=\"-391\">selectNextCosimStepAction(),\n                stepFinderActive := false\n            </label>\n            <nail x=\"1946\" y=\"-365\"/>\n        </transition>\n        <transition>\n            <source ref=\"id18\"/>\n            <target ref=\"id12\"/>\n            <label kind=\"guard\" x=\"1844\" y=\"-221\">action == findStep</label>\n            <label kind=\"synchronisation\" x=\"2005\" y=\"-170\">findStepChan!</label>\n            <label kind=\"assignment\" x=\"1997\" y=\"-195\">stepFinderActive := true</label>\n        </transition>\n        <transition>\n            <source ref=\"id13\"/>\n            <target ref=\"id18\"/>\n            <label kind=\"assignment\" x=\"1428\" y=\"-144\">selectNextCosimStepAction(), isSimulation = 1</label>\n            <nail x=\"1521\" y=\"-102\"/>\n        </transition>\n        <transition>\n            <source ref=\"id15\"/>\n            <target ref=\"id15\"/>\n            <nail x=\"442\" y=\"476\"/>\n            <nail x=\"442\" y=\"391\"/>\n        </transition>\n        <transition>\n            <source ref=\"id14\"/>\n            <target ref=\"id18\"/>\n            <label kind=\"synchronisation\" x=\"1631\" y=\"-493\">actionPerformed?</label>\n            <label kind=\"assignment\" x=\"1631\" y=\"-467\">selectNextCosimStepAction()</label>\n            <nail x=\"1716\" y=\"-442\"/>\n        </transition>\n        <transition>\n            <source ref=\"id18\"/>\n            <target ref=\"id14\"/>\n            <label kind=\"guard\" x=\"1334\" y=\"-382\">(action == get ||\n                action == set ||\n                action == step ||\n                action == save ||\n                action == restore)\n                &amp;&amp; cosimstep_pc &lt; (nStepOperations +1)\n            </label>\n            <label kind=\"synchronisation\" x=\"1470\" y=\"-255\">fmu[activeFMU]!</label>\n        </transition>\n        <transition>\n            <source ref=\"id16\"/>\n            <target ref=\"id17\"/>\n            <label kind=\"guard\" x=\"578\" y=\"120\">terminate_pc &lt; nTerminationOperations</label>\n            <label kind=\"assignment\" x=\"680\" y=\"86\">findFMUTerminateAction()</label>\n            <nail x=\"561\" y=\"153\"/>\n            <nail x=\"952\" y=\"153\"/>\n        </transition>\n        <transition>\n            <source ref=\"id16\"/>\n            <target ref=\"id15\"/>\n            <label kind=\"guard\" x=\"570\" y=\"332\">terminate_pc == nTerminationOperations</label>\n        </transition>\n        <transition>\n            <source ref=\"id17\"/>\n            <target ref=\"id16\"/>\n            <label kind=\"guard\" x=\"655\" y=\"187\">action == unload ||\n                action == freeInstance ||\n                action == terminate\n            </label>\n            <label kind=\"synchronisation\" x=\"697\" y=\"247\">fmu[activeFMU]!</label>\n        </transition>\n        <transition>\n            <source ref=\"id18\"/>\n            <target ref=\"id17\"/>\n            <label kind=\"guard\" x=\"1436\" y=\"102\">cosimstep_pc == nStepOperations + 1\n                &amp;&amp; time &gt;= end\n            </label>\n            <label kind=\"assignment\" x=\"1436\" y=\"161\">findFMUTerminateAction(), isSimulation = 0</label>\n            <nail x=\"1683\" y=\"272\"/>\n        </transition>\n        <transition>\n            <source ref=\"id21\"/>\n            <target ref=\"id22\"/>\n            <label kind=\"guard\" x=\"-120\" y=\"-93\">action == instantiate ||\n                action == setParameter ||\n                action == setupExperiment\n            </label>\n            <label kind=\"synchronisation\" x=\"-106\" y=\"-127\">fmu[activeFMU]!</label>\n        </transition>\n        <transition>\n            <source ref=\"id22\"/>\n            <target ref=\"id21\"/>\n            <label kind=\"guard\" x=\"-156\" y=\"-297\">inst_pc &lt; nInstantiationOperations</label>\n            <label kind=\"synchronisation\" x=\"-156\" y=\"-280\">actionPerformed?</label>\n            <label kind=\"assignment\" x=\"-127\" y=\"-263\">selectNextInstAction()</label>\n            <nail x=\"107\" y=\"-263\"/>\n            <nail x=\"-174\" y=\"-263\"/>\n        </transition>\n        <transition>\n            <source ref=\"id23\"/>\n            <target ref=\"id21\"/>\n            <label kind=\"assignment\" x=\"-383\" y=\"-102\">selectNextInstAction()</label>\n        </transition>\n    </template>\n    <template>\n        <name>LoopSolverInit</name>\n        <parameter>const int maxIteration</parameter>\n        <declaration>\n            int convergence_pc := 0;\n\n            //Number of iteration run in the loop Solver\n            int currentIteration := 0;\n\n            //for index\n            int i := 0;\n\n            void selectNextLoopAction(int l){\n                unpackOperation(operationsPerAlgebraicLoopInInit[l][convergence_pc]);\n                //Proceed to next action\n                convergence_pc ++;\n            }\n\n            void updateConvergenceVariables(int l){\n                int fmu;\n                int v;\n                for(i = 0; i &lt; nConvergencePortsPerAlgebraicLoopInInit[l]; i++){\n                    fmu = convergencePortsPerAlgebraicLoopInInit[l][i].FMU;\n                    v = convergencePortsPerAlgebraicLoopInInit[l][i].port;\n                    connectionVariable[fmu][v][tentative].status = connectionVariable[fmu][v][final].status;\n                    connectionVariable[fmu][v][tentative].time = connectionVariable[fmu][v][final].time;\n                }\n            }\n\n            void loopConverge(){\n                //Loop not longer active\n                loopActive := -1;\n                //Loop action counter reset\n                convergence_pc := 0;\n                //Reset convergence counter\n                currentIteration := 0;\n            }\n\n\n            void resetConvergenceloop(){\n                convergence_pc := 0;\n                selectNextLoopAction(loopActive);\n            }\n\n            //Convergence will happen when all convergenceVariables have a similar future and current value\n            bool convergenceCriteria(int l){\n                return forall(x:int[0,maxNConvergeOperationsForAlgebraicLoopsInInit-1])\n                                    convergencePortsPerAlgebraicLoopInInit[l][x].FMU != noFMU imply connectionVariable[convergencePortsPerAlgebraicLoopInInit[l][x].FMU][convergencePortsPerAlgebraicLoopInInit[l][x].port][final].status\n                                == connectionVariable[convergencePortsPerAlgebraicLoopInInit[l][x].FMU][convergencePortsPerAlgebraicLoopInInit[l][x].port][tentative].status\n                                &amp;&amp;\n                                connectionVariable[convergencePortsPerAlgebraicLoopInInit[l][x].FMU][convergencePortsPerAlgebraicLoopInInit[l][x].port][final].time\n                                == connectionVariable[convergencePortsPerAlgebraicLoopInInit[l][x].FMU][convergencePortsPerAlgebraicLoopInInit[l][x].port][tentative].time;\n            }\n\n            bool convergence(int l){\n                return (convergenceCriteria(l) &amp;&amp; isLoopExtraIteration);\n            }\n\n\n            void updateIsExtra(int l){\n                if(convergenceCriteria(l)){\n                    isLoopExtraIteration := true;\n                }\n            }\n        </declaration>\n        <location id=\"id0\" x=\"-1011\" y=\"-518\">\n            <committed/>\n        </location>\n        <location id=\"id1\" x=\"-94\" y=\"-816\">\n            <name x=\"-146\" y=\"-850\">NotConverging</name>\n        </location>\n        <location id=\"id2\" x=\"-391\" y=\"-247\">\n            <name x=\"-340\" y=\"-213\">UpdateVariables</name>\n            <committed/>\n        </location>\n        <location id=\"id3\" x=\"-391\" y=\"-510\">\n            <name x=\"-357\" y=\"-519\">CheckConvergence</name>\n            <committed/>\n        </location>\n        <location id=\"id4\" x=\"-1173\" y=\"-416\">\n        </location>\n        <location id=\"id5\" x=\"-1343\" y=\"-518\">\n            <committed/>\n        </location>\n        <location id=\"id6\" x=\"-1708\" y=\"-518\">\n        </location>\n        <init ref=\"id6\"/>\n        <transition>\n            <source ref=\"id3\"/>\n            <target ref=\"id2\"/>\n            <label kind=\"guard\" x=\"-391\" y=\"-417\">!convergence(loopActive) &amp;&amp;\n                currentIteration &lt; maxIteration\n            </label>\n            <label kind=\"assignment\" x=\"-374\" y=\"-349\">updateIsExtra(loopActive)</label>\n        </transition>\n        <transition>\n            <source ref=\"id0\"/>\n            <target ref=\"id5\"/>\n            <label kind=\"guard\" x=\"-1368\" y=\"-671\">convergence_pc &lt; nOperationsPerAlgebraicLoopInInit[loopActive]\n            </label>\n            <label kind=\"assignment\" x=\"-1283\" y=\"-510\">selectNextLoopAction(loopActive)</label>\n            <nail x=\"-1173\" y=\"-620\"/>\n        </transition>\n        <transition>\n            <source ref=\"id0\"/>\n            <target ref=\"id3\"/>\n            <label kind=\"guard\" x=\"-884\" y=\"-569\">convergence_pc == nOperationsPerAlgebraicLoopInInit[loopActive]\n            </label>\n            <label kind=\"assignment\" x=\"-993\" y=\"-518\">currentIteration++</label>\n        </transition>\n        <transition>\n            <source ref=\"id4\"/>\n            <target ref=\"id0\"/>\n            <label kind=\"synchronisation\" x=\"-1020\" y=\"-433\">actionPerformed?</label>\n        </transition>\n        <transition>\n            <source ref=\"id5\"/>\n            <target ref=\"id4\"/>\n            <label kind=\"guard\" x=\"-1249\" y=\"-374\">action == get ||\n                action == set\n            </label>\n            <label kind=\"synchronisation\" x=\"-1282\" y=\"-403\">fmu[activeFMU]!</label>\n        </transition>\n        <transition>\n            <source ref=\"id2\"/>\n            <target ref=\"id5\"/>\n            <label kind=\"assignment\" x=\"-1402\" y=\"-212\">updateConvergenceVariables(loopActive),\n                resetConvergenceloop()\n            </label>\n            <nail x=\"-1309\" y=\"-246\"/>\n            <nail x=\"-1343\" y=\"-246\"/>\n        </transition>\n        <transition>\n            <source ref=\"id3\"/>\n            <target ref=\"id1\"/>\n            <label kind=\"guard\" x=\"-468\" y=\"-859\">!convergence(loopActive) &amp;&amp;\n                currentIteration == maxIteration\n            </label>\n            <label kind=\"synchronisation\" x=\"-298\" y=\"-884\">ErrorChan!</label>\n            <nail x=\"-323\" y=\"-620\"/>\n            <nail x=\"-323\" y=\"-816\"/>\n        </transition>\n        <transition>\n            <source ref=\"id3\"/>\n            <target ref=\"id6\"/>\n            <label kind=\"guard\" x=\"-1249\" y=\"-816\">convergence(loopActive)</label>\n            <label kind=\"synchronisation\" x=\"-1071\" y=\"-816\">solveLoopInit!</label>\n            <label kind=\"assignment\" x=\"-1385\" y=\"-859\">loopConverge(),\n                isLoopExtraIteration:= false\n            </label>\n            <nail x=\"-391\" y=\"-782\"/>\n            <nail x=\"-1105\" y=\"-790\"/>\n            <nail x=\"-1708\" y=\"-790\"/>\n        </transition>\n        <transition>\n            <source ref=\"id6\"/>\n            <target ref=\"id5\"/>\n            <label kind=\"guard\" x=\"-1581\" y=\"-569\">loopActive != -1\n                &amp;&amp; action == loop\n            </label>\n            <label kind=\"synchronisation\" x=\"-1505\" y=\"-536\">solveLoopInit?</label>\n            <label kind=\"assignment\" x=\"-1632\" y=\"-493\">selectNextLoopAction(loopActive),\n                currentIteration := 0\n            </label>\n            <nail x=\"-1377\" y=\"-518\"/>\n        </transition>\n    </template>\n    <template>\n        <name>LoopSolver</name>\n        <parameter>const int maxIteration</parameter>\n        <declaration>\n            int convergence_pc := 0;\n            int restore_pc := 0;\n\n            //Number of iteration run in the loop Solver\n            int currentConvergeLoopIteration := 0;\n\n            //for index\n            int i := 0;\n\n            void selectNextLoopAction(int l){\n                unpackOperation(operationsPerAlgebraicLoopInStep[l][convergence_pc]);\n                //Proceed to next action\n                convergence_pc ++;\n            }\n\n            void selectNextRestoreAction(int l){\n                unpackOperation(retryOperationsPerAlgebraicLoopInStep[l][restore_pc]);\n                restore_pc++;\n            }\n\n\n            void updateConvergenceVariables(int l){\n                int fmu;\n                int v;\n                for(i = 0; i &lt; nConvergencePortsPerAlgebraicLoopInStep[l]; i++){\n                    fmu = convergencePortsPerAlgebraicLoopInStep[l][i].FMU;\n                    v = convergencePortsPerAlgebraicLoopInStep[l][i].port;\n                    connectionVariable[fmu][v][final].status := connectionVariable[fmu][v][tentative].status;\n                    connectionVariable[fmu][v][final].time := connectionVariable[fmu][v][tentative].time;\n                }\n            }\n\n            void loopConverge(){\n                //Loop not longer active\n                loopActive := -1;\n                //Loop action counter reset\n                convergence_pc := 0;\n                //Reset convergence counter\n                currentConvergeLoopIteration := 0;\n            }\n\n\n            void resetConvergenceloop(){\n                convergence_pc := 0;\n                restore_pc := 0;\n                selectNextLoopAction(loopActive);\n            }\n\n            //Convergence will happen when all convergenceVariables have a similar future and current value\n            bool convergenceCriteria(int l){\n            return forall(x:int[0,maxNConvergeOperationsForAlgebraicLoopsInStep-1])\n                convergencePortsPerAlgebraicLoopInStep[l][x].FMU != noFMU imply\n                connectionVariable[convergencePortsPerAlgebraicLoopInStep[l][x].FMU][convergencePortsPerAlgebraicLoopInStep[l][x].port][final].status\n                ==\n                connectionVariable[convergencePortsPerAlgebraicLoopInStep[l][x].FMU][convergencePortsPerAlgebraicLoopInStep[l][x].port][tentative].status\n                &amp;&amp;\n                connectionVariable[convergencePortsPerAlgebraicLoopInStep[l][x].FMU][convergencePortsPerAlgebraicLoopInStep[l][x].port][final].time\n                ==\n                connectionVariable[convergencePortsPerAlgebraicLoopInStep[l][x].FMU][convergencePortsPerAlgebraicLoopInStep[l][x].port][tentative].time;\n            }\n\n            bool convergence(int l){\n                return (convergenceCriteria(l) &amp;&amp; isLoopExtraIteration);\n            }\n\n\n            void updateIsExtra(int l){\n                if(convergenceCriteria(l)){\n                    isLoopExtraIteration := true;\n                }\n            }\n        </declaration>\n        <location id=\"id15\" x=\"-1011\" y=\"-518\">\n            <committed/>\n        </location>\n        <location id=\"id16\" x=\"-1079\" y=\"-663\">\n        </location>\n        <location id=\"id17\" x=\"-442\" y=\"-824\">\n            <name x=\"-494\" y=\"-858\">NotConverging</name>\n        </location>\n        <location id=\"id18\" x=\"-484\" y=\"-255\">\n            <name x=\"-433\" y=\"-221\">UpdateVariables</name>\n            <committed/>\n        </location>\n        <location id=\"id19\" x=\"-17\" y=\"-518\">\n        </location>\n        <location id=\"id20\" x=\"-340\" y=\"-518\">\n            <name x=\"-332\" y=\"-509\">Restore</name>\n            <committed/>\n        </location>\n        <location id=\"id21\" x=\"-739\" y=\"-518\">\n            <name x=\"-714\" y=\"-543\">CheckConvergence</name>\n            <committed/>\n        </location>\n        <location id=\"id22\" x=\"-1088\" y=\"-357\">\n        </location>\n        <location id=\"id23\" x=\"-1343\" y=\"-518\">\n            <committed/>\n        </location>\n        <location id=\"id24\" x=\"-1708\" y=\"-518\">\n        </location>\n        <init ref=\"id24\"/>\n        <transition>\n            <source ref=\"id15\"/>\n            <target ref=\"id23\"/>\n            <label kind=\"guard\" x=\"-1291\" y=\"-548\">convergence_pc &lt; nOperationsPerAlgebraicLoopInStep[loopActive]\n            </label>\n            <label kind=\"assignment\" x=\"-1283\" y=\"-510\">selectNextLoopAction(loopActive)</label>\n        </transition>\n        <transition>\n            <source ref=\"id23\"/>\n            <target ref=\"id16\"/>\n            <label kind=\"guard\" x=\"-1292\" y=\"-646\">action == findStep</label>\n            <label kind=\"synchronisation\" x=\"-1317\" y=\"-612\">findStepChan!</label>\n            <label kind=\"assignment\" x=\"-1334\" y=\"-680\">isStepNested := true</label>\n        </transition>\n        <transition>\n            <source ref=\"id15\"/>\n            <target ref=\"id21\"/>\n            <label kind=\"guard\" x=\"-1011\" y=\"-552\">convergence_pc == nOperationsPerAlgebraicLoopInStep[loopActive]\n            </label>\n            <label kind=\"assignment\" x=\"-993\" y=\"-518\">currentConvergeLoopIteration++</label>\n        </transition>\n        <transition>\n            <source ref=\"id16\"/>\n            <target ref=\"id15\"/>\n            <label kind=\"synchronisation\" x=\"-1011\" y=\"-612\">findStepChan?</label>\n            <label kind=\"assignment\" x=\"-1020\" y=\"-586\">isStepNested = false</label>\n        </transition>\n        <transition>\n            <source ref=\"id22\"/>\n            <target ref=\"id15\"/>\n            <label kind=\"synchronisation\" x=\"-1020\" y=\"-433\">actionPerformed?</label>\n        </transition>\n        <transition>\n            <source ref=\"id23\"/>\n            <target ref=\"id22\"/>\n            <label kind=\"guard\" x=\"-1249\" y=\"-374\">action == get ||\n                action == set ||\n                action == step ||\n                action == restore\n            </label>\n            <label kind=\"synchronisation\" x=\"-1282\" y=\"-403\">fmu[activeFMU]!</label>\n        </transition>\n        <transition>\n            <source ref=\"id18\"/>\n            <target ref=\"id23\"/>\n            <label kind=\"assignment\" x=\"-1402\" y=\"-212\">updateConvergenceVariables(loopActive),\n                resetConvergenceloop()\n            </label>\n            <nail x=\"-1309\" y=\"-246\"/>\n            <nail x=\"-1343\" y=\"-246\"/>\n        </transition>\n        <transition>\n            <source ref=\"id21\"/>\n            <target ref=\"id17\"/>\n            <label kind=\"guard\" x=\"-816\" y=\"-867\">!convergence(loopActive) &amp;&amp;\n                currentConvergeLoopIteration == maxIteration\n            </label>\n            <label kind=\"synchronisation\" x=\"-646\" y=\"-892\">ErrorChan!</label>\n            <nail x=\"-671\" y=\"-628\"/>\n            <nail x=\"-671\" y=\"-824\"/>\n        </transition>\n        <transition>\n            <source ref=\"id19\"/>\n            <target ref=\"id18\"/>\n            <label kind=\"guard\" x=\"-229\" y=\"-306\">restore_pc == nRetryOperationsPerAlgebraicLoopInStep[loopActive]\n            </label>\n            <label kind=\"synchronisation\" x=\"-221\" y=\"-280\">actionPerformed?</label>\n            <nail x=\"-17\" y=\"-255\"/>\n        </transition>\n        <transition>\n            <source ref=\"id19\"/>\n            <target ref=\"id20\"/>\n            <label kind=\"guard\" x=\"-272\" y=\"-731\">restore_pc &lt; nRetryOperationsPerAlgebraicLoopInStep[loopActive]\n            </label>\n            <label kind=\"synchronisation\" x=\"-272\" y=\"-705\">actionPerformed?</label>\n            <label kind=\"assignment\" x=\"-297\" y=\"-663\">selectNextRestoreAction(loopActive)</label>\n            <nail x=\"-17\" y=\"-680\"/>\n            <nail x=\"-340\" y=\"-680\"/>\n        </transition>\n        <transition>\n            <source ref=\"id20\"/>\n            <target ref=\"id19\"/>\n            <label kind=\"synchronisation\" x=\"-247\" y=\"-552\">fmu[activeFMU]!</label>\n            <nail x=\"-213\" y=\"-518\"/>\n        </transition>\n        <transition>\n            <source ref=\"id21\"/>\n            <target ref=\"id24\"/>\n            <label kind=\"guard\" x=\"-1249\" y=\"-816\">convergence(loopActive)</label>\n            <label kind=\"synchronisation\" x=\"-1071\" y=\"-816\">solveLoop!</label>\n            <label kind=\"assignment\" x=\"-1385\" y=\"-859\">loopConverge(),\n                isLoopExtraIteration:= false\n            </label>\n            <nail x=\"-739\" y=\"-790\"/>\n            <nail x=\"-1105\" y=\"-790\"/>\n            <nail x=\"-1708\" y=\"-790\"/>\n        </transition>\n        <transition>\n            <source ref=\"id21\"/>\n            <target ref=\"id20\"/>\n            <label kind=\"guard\" x=\"-671\" y=\"-586\">!convergence(loopActive) &amp;&amp;\n                currentConvergeLoopIteration &lt; maxIteration\n            </label>\n            <label kind=\"assignment\" x=\"-663\" y=\"-510\">selectNextRestoreAction(loopActive),\n                updateIsExtra(loopActive)\n            </label>\n        </transition>\n        <transition>\n            <source ref=\"id24\"/>\n            <target ref=\"id23\"/>\n            <label kind=\"guard\" x=\"-1581\" y=\"-569\">loopActive != -1\n                &amp;&amp; action == loop\n            </label>\n            <label kind=\"synchronisation\" x=\"-1505\" y=\"-536\">solveLoop?</label>\n            <label kind=\"assignment\" x=\"-1632\" y=\"-493\">selectNextLoopAction(loopActive),\n                currentConvergeLoopIteration := 0\n            </label>\n            <nail x=\"-1377\" y=\"-518\"/>\n        </transition>\n    </template>\n    <template>\n        <name>StepFinder</name>\n        <parameter>const int maxTries</parameter>\n        <declaration>\n            int step_pc := 0;\n            int restore_pc := 0;\n            int numbersOfTries := 0;\n\n            void selectNextStepFinderAction(){\n                unpackOperation(findStepIteration[step_pc]);\n                step_pc++;\n            }\n\n            void selectNextStepRestoreAction(){\n                unpackOperation(StepFix[restore_pc]);\n                restore_pc++;\n            }\n\n            void findMinStep(){\n            //Maximum step size allowed\n                int min = nFMU;\n                int j := 0;\n                for(j = 0; j &lt; nFMU; j++){\n                    if(stepVariables[j] &lt; min){\n                        min := stepVariables[j];\n                    }\n                }\n                h := min;\n            }\n\n\n            bool stepFound(){\n                //All FMU that may reject a step should be able to take the same step - h\n                return forall(x:int[0, nFMU-1]) mayRejectStep[x] imply stepVariables[x] == h;\n            }\n\n            bool loopConverged(){\n                return (stepFound() &amp;&amp; isStepExtraIteration);\n            }\n\n\n            void updateIsExtra(){\n                if(stepFound()){\n                    isStepExtraIteration := true;\n                    //Reset numbers of tries to 0 - This is to avoid problems with the maximum number of tries and not to active the nested checks\n                    numbersOfTries := 0;\n                }\n            }\n        </declaration>\n        <location id=\"id26\" x=\"1122\" y=\"-178\">\n            <committed/>\n        </location>\n        <location id=\"id27\" x=\"-34\" y=\"-178\">\n            <committed/>\n        </location>\n        <location id=\"id28\" x=\"-144\" y=\"17\">\n        </location>\n        <location id=\"id29\" x=\"817\" y=\"144\">\n            <committed/>\n        </location>\n        <location id=\"id30\" x=\"654\" y=\"-578\">\n            <name x=\"644\" y=\"-612\">NoCommonStep</name>\n        </location>\n        <location id=\"id31\" x=\"-1427\" y=\"-178\">\n            <name x=\"-1478\" y=\"-187\">Start</name>\n        </location>\n        <location id=\"id32\" x=\"1011\" y=\"-331\">\n        </location>\n        <location id=\"id33\" x=\"732\" y=\"-178\">\n            <name x=\"681\" y=\"-237\">Reset</name>\n            <committed/>\n        </location>\n        <location id=\"id34\" x=\"348\" y=\"-178\">\n            <committed/>\n        </location>\n        <location id=\"id35\" x=\"-144\" y=\"-382\">\n        </location>\n        <location id=\"id36\" x=\"-510\" y=\"-178\">\n            <committed/>\n        </location>\n        <init ref=\"id31\"/>\n        <transition>\n            <source ref=\"id31\"/>\n            <target ref=\"id36\"/>\n            <label kind=\"synchronisation\" x=\"-1105\" y=\"-212\">findStepChan?</label>\n            <label kind=\"assignment\" x=\"-1156\" y=\"-161\">selectNextStepFinderAction()</label>\n        </transition>\n        <transition>\n            <source ref=\"id26\"/>\n            <target ref=\"id29\"/>\n            <label kind=\"guard\" x=\"884\" y=\"110\">nRestore == restore_pc</label>\n            <nail x=\"1147\" y=\"-178\"/>\n            <nail x=\"1147\" y=\"144\"/>\n        </transition>\n        <transition>\n            <source ref=\"id26\"/>\n            <target ref=\"id33\"/>\n            <label kind=\"guard\" x=\"892\" y=\"-212\">restore_pc &lt; nRestore</label>\n            <label kind=\"assignment\" x=\"901\" y=\"-170\">selectNextStepRestoreAction()</label>\n        </transition>\n        <transition>\n            <source ref=\"id32\"/>\n            <target ref=\"id26\"/>\n            <label kind=\"synchronisation\" x=\"1062\" y=\"-289\">actionPerformed?</label>\n        </transition>\n        <transition>\n            <source ref=\"id27\"/>\n            <target ref=\"id36\"/>\n            <label kind=\"guard\" x=\"-365\" y=\"-212\">step_pc &lt; nFindStepOperations</label>\n            <label kind=\"assignment\" x=\"-416\" y=\"-178\">selectNextStepFinderAction()</label>\n        </transition>\n        <transition>\n            <source ref=\"id28\"/>\n            <target ref=\"id27\"/>\n            <label kind=\"synchronisation\" x=\"-51\" y=\"-85\">solveLoop?</label>\n            <label kind=\"assignment\" x=\"-102\" y=\"-51\">isLoopNested := false</label>\n        </transition>\n        <transition>\n            <source ref=\"id27\"/>\n            <target ref=\"id34\"/>\n            <label kind=\"guard\" x=\"-16\" y=\"-212\">nFindStepOperations == step_pc</label>\n            <label kind=\"assignment\" x=\"110\" y=\"-161\">findMinStep(),\n                numbersOfTries++\n            </label>\n        </transition>\n        <transition>\n            <source ref=\"id35\"/>\n            <target ref=\"id27\"/>\n            <label kind=\"synchronisation\" x=\"-85\" y=\"-323\">actionPerformed?</label>\n        </transition>\n        <transition>\n            <source ref=\"id36\"/>\n            <target ref=\"id28\"/>\n            <label kind=\"guard\" x=\"-459\" y=\"-51\">action == loop</label>\n            <label kind=\"synchronisation\" x=\"-459\" y=\"-76\">solveLoop!</label>\n            <label kind=\"assignment\" x=\"-442\" y=\"8\">isLoopNested := true</label>\n        </transition>\n        <transition>\n            <source ref=\"id29\"/>\n            <target ref=\"id36\"/>\n            <label kind=\"assignment\" x=\"-459\" y=\"170\">step_pc := 0, restore_pc := 0, selectNextStepFinderAction()\n            </label>\n            <nail x=\"-510\" y=\"153\"/>\n        </transition>\n        <transition>\n            <source ref=\"id34\"/>\n            <target ref=\"id30\"/>\n            <label kind=\"guard\" x=\"407\" y=\"-561\">!stepFound() &amp;&amp;\n                numbersOfTries == maxTries\n            </label>\n            <label kind=\"synchronisation\" x=\"484\" y=\"-510\">ErrorChan!</label>\n        </transition>\n        <transition>\n            <source ref=\"id34\"/>\n            <target ref=\"id31\"/>\n            <label kind=\"guard\" x=\"-1258\" y=\"-748\">loopConverged()</label>\n            <label kind=\"synchronisation\" x=\"-1258\" y=\"-722\">findStepChan!</label>\n            <label kind=\"assignment\" x=\"-1258\" y=\"-688\">step_pc := 0, isStepExtraIteration := false, restore_pc:=0,\n                numbersOfTries := 0\n            </label>\n            <nail x=\"76\" y=\"-612\"/>\n            <nail x=\"-1428\" y=\"-612\"/>\n        </transition>\n        <transition>\n            <source ref=\"id33\"/>\n            <target ref=\"id32\"/>\n            <label kind=\"synchronisation\" x=\"782\" y=\"-348\">fmu[activeFMU]!</label>\n        </transition>\n        <transition>\n            <source ref=\"id34\"/>\n            <target ref=\"id33\"/>\n            <label kind=\"guard\" x=\"416\" y=\"-221\">!loopConverged() &amp;&amp;\n                numbersOfTries &lt; maxTries\n            </label>\n            <label kind=\"assignment\" x=\"433\" y=\"-161\">selectNextStepRestoreAction(),\n                updateIsExtra()\n            </label>\n        </transition>\n        <transition>\n            <source ref=\"id36\"/>\n            <target ref=\"id35\"/>\n            <label kind=\"guard\" x=\"-467\" y=\"-382\">action == get ||\n                action == set ||\n                action == step ||\n                action == restore\n            </label>\n            <label kind=\"synchronisation\" x=\"-484\" y=\"-289\">fmu[activeFMU]!</label>\n        </transition>\n    </template>\n    <template>\n        <name>FMU</name>\n        <parameter>const int id, const int nOutput, const int nInput, const int inputType[MaxNInputs]</parameter>\n        <declaration>\n            int cTime := START_TIME;\n            variable inputVariables[MaxNInputs] = { {defined,0},{defined,0} };\n            variable outputVariables[MaxNOutputs] = { {defined,0},{defined,0} };\n\n            //Index for the for-loop\n            int i := 0;\n\n            //Backup FMU\n            variable savedOutputVariables[MaxNOutputs];\n            variable savedInputVariables[MaxNInputs];\n            int savedTime;\n            bool isSaved := false;\n            bool isConsistent := true;\n\n            int stepEnabled := false;\n            bool getEnabled[MaxNOutputs] := { false,false };\n            bool setEnabled[MaxNInputs] := { false,false };\n\n            void initialize(){\n                //Set all variables to undefined\n                for(i = 0; i &lt; nInput; i++){\n                    inputVariables[i].status := undefined;\n                    inputVariables[i].time := 0;\n                }\n                for(i := 0; i &lt; nOutput; i++){\n                    outputVariables[i].status := undefined;\n                    outputVariables[i].time := 0;\n                }\n            }\n\n            void getValue(int v, int a){\n                outputVariables[v].status := defined;\n                outputVariables[v].time := cTime;\n\n                connectionVariable[id][v][a].status := defined;\n                connectionVariable[id][v][a].time := cTime;\n            }\n\n            void setValue(int v, int a){\n                inputVariables[v].status := defined;\n                for(i = 0; i &lt; nExternal; i++){\n                    if(external[i].TrgFMU == id &amp;&amp; external[i].input == v){\n                        inputVariables[v].time := connectionVariable[external[i].SrcFMU][external[i].output][a].time;\n                    }\n                }\n            }\n\n            //Proceed in time - we will start by assuming an FMU can't reject a stepsize\n            void doStep(int t){\n                //Checking of step is valid\n                if(t &gt; stepVariables[id]){\n                    //Step is too big and will not be allowed - t is reset too the biggest allowed step\n                    t := stepVariables[id];\n                }\n\n                //Take step\n                cTime := cTime + t;\n\n                isConsistent := true;\n\n                for(i = 0; i &lt; nInput; i++){\n                    if(inputVariables[i].time != cTime){\n                        isConsistent := false;\n                    }\n                }\n\n                //Reset outputs accesssed and advance their timestamp\n                for(i = 0; i &lt; nOutput; i++){\n                    //The inputs of the FMUs are inconsistent (not all are at time cTime) - so the FMUs output valid should be set to NaN\n                    if(isConsistent){\n                        outputVariables[i].status := undefined;\n                        outputVariables[i].time := cTime;\n                    }else{\n                        outputVariables[i].status := notStable;\n                        outputVariables[i].time := cTime;\n                    }\n                }\n\n                isConsistent := true;\n\n                //Update or return the taken step size\n                stepVariables[id] := t;\n            }\n\n            void restoreFMU(){\n                outputVariables := savedOutputVariables;\n                inputVariables := savedInputVariables;\n                cTime := savedTime;\n            }\n\n            void saveFMU(){\n                savedOutputVariables := outputVariables;\n                savedInputVariables := inputVariables;\n                savedTime := cTime;\n                isSaved := true;\n            }\n\n            bool preSetInit(int v, int a){\n                if(checksDisabled){\n                    return true;\n                }\n                //All outputs connected to the input should be defined - no difference between delay and reactive in init. ConnectionVariables an d ExternalConnections are having the same order\n                return forall(x:int[0, nExternal-1]) external[x].TrgFMU == id &amp;&amp; external[x].input == v imply\n                    connectionVariable[external[x].SrcFMU][external[x].output][a].status == defined;\n\n            }\n\n            bool preGetInit(int v){\n                if(checksDisabled){\n                    return true;\n                }\n                //The internal time should be equivalent to 0 and all variable connected to this one should be defined\n                return forall(x:int[0, nInternalInit-1]) feedthroughInInit[x].FMU == id &amp;&amp; feedthroughInInit[x].output == v\n                    imply inputVariables[feedthroughInInit[x].input].status == defined;\n            }\n\n\n            bool preSet(int v, int a){\n                if(checksDisabled){\n                    return true;\n                }\n\n            //If the connection is reactive the connected variable needs to have a greater than the time of the FMU and be defined\n            return (forall(x:int[0, nExternal-1]) external[x].TrgFMU == id &amp;&amp; external[x].input == v &amp;&amp;\n                inputType[v] == reactive imply connectionVariable[external[x].SrcFMU][external[x].output][a].status == defined &amp;&amp;\n                                connectionVariable[external[x].SrcFMU][external[x].output][a].time &gt; cTime) &amp;&amp;\n                (forall(x:int[0, nExternal-1]) external[x].TrgFMU == id &amp;&amp; external[x].input == v &amp;&amp; inputType[v] == delayed\n                imply connectionVariable[external[x].SrcFMU][external[x].output][a].status == defined &amp;&amp;\n                connectionVariable[external[x].SrcFMU][external[x].output][a].time == cTime);\n            }\n\n\n            bool preGet(int v){\n                if(checksDisabled){\n                    return true;\n                }\n\n                //All internal connections should be defined at time cTime\n                return forall(x:int[0, nInternal-1]) feedthroughInStep[x].FMU == id &amp;&amp; feedthroughInStep[x].output == v\n                imply inputVariables[feedthroughInStep[x].input].status == defined &amp;&amp; inputVariables[feedthroughInStep[x].input].time == cTime;\n            }\n\n            bool preDoStep(int t){\n                if(checksDisabled){\n                    return true;\n                }\n\n                //All delayed input ports should be defined at the current time\n                //And all reactive inputs ports should be defined at the next time step\n                return (forall(x:int[0, MaxNInputs-1]) inputType[x] == reactive imply inputVariables[x].status == defined &amp;&amp; inputVariables[x].time == cTime + t) &amp;&amp;\n                (forall(x:int[0, MaxNInputs-1]) inputType[x] == delayed imply inputVariables[x].status == defined &amp;&amp; inputVariables[x].time == cTime);\n            }\n\n            //An FMU can only enter the Simulation mode when all connected FMU variables are defined at time 0\n            bool preSimulation(){\n                return ((forall(x:int[0, MaxNOutputs-1]) outputVariables[x].status == defined &amp;&amp; outputVariables[x].time == 0)\n                &amp;&amp; (forall(x:int[0, MaxNInputs-1]) inputVariables[x].status == defined &amp;&amp;\n                inputVariables[x].time == 0));\n            }\n\n            bool preSaveFMU(){\n                //Always possible\n                return true;\n            }\n\n            bool preRestoreFMU(){\n                //Should a requirement be a saved previous FMU?\n                return isSaved;\n            }\n\n            void updateEnableActions(bool isInit){\n                if(isInit){\n                    for(i = 0; i &lt; nInput; i++){\n                        setEnabled[i] := preSetInit(i, final) &amp;&amp;\n                            inputVariables[i].status == undefined;\n                    }\n                    for(i := 0; i &lt; nOutput; i++){\n                        getEnabled[i] := preGetInit(i) &amp;&amp;\n                            outputVariables[i].status == undefined;\n                    }\n                stepEnabled := false;\n            }else{\n                    for(i = 0; i &lt; nInput; i++){\n                        setEnabled[i] := preSet(i, final);\n                    }\n                    for(i := 0; i &lt; nOutput; i++){\n                        getEnabled[i] := preGet(i);\n                    }\n                    stepEnabled := preDoStep(h);\n                }\n            }\n\n        </declaration>\n        <location id=\"id37\" x=\"-9588\" y=\"-11305\">\n            <name x=\"-9598\" y=\"-11339\">Unloaded</name>\n        </location>\n        <location id=\"id38\" x=\"-9826\" y=\"-11305\">\n        </location>\n        <location id=\"id39\" x=\"-11584\" y=\"-11118\">\n        </location>\n        <location id=\"id40\" x=\"-12034\" y=\"-11118\">\n            <committed/>\n        </location>\n        <location id=\"id41\" x=\"-10752\" y=\"-11305\">\n            <label kind=\"invariant\" x=\"-10795\" y=\"-11280\">preSimulation()</label>\n            <committed/>\n        </location>\n        <location id=\"id42\" x=\"-11339\" y=\"-11305\">\n            <committed/>\n        </location>\n        <location id=\"id43\" x=\"-11813\" y=\"-11305\">\n            <committed/>\n        </location>\n        <location id=\"id44\" x=\"-12230\" y=\"-11305\">\n            <committed/>\n        </location>\n        <location id=\"id45\" x=\"-11584\" y=\"-11305\">\n        </location>\n        <location id=\"id46\" x=\"-12034\" y=\"-11305\">\n            <name x=\"-12204\" y=\"-11543\">Instantiated</name>\n        </location>\n        <location id=\"id47\" x=\"-10574\" y=\"-11152\">\n            <label kind=\"invariant\" x=\"-10584\" y=\"-11135\">preRestoreFMU()</label>\n            <committed/>\n        </location>\n        <location id=\"id48\" x=\"-11058\" y=\"-11186\">\n            <label kind=\"invariant\" x=\"-11101\" y=\"-11169\">preGetInit(var)</label>\n            <committed/>\n        </location>\n        <location id=\"id49\" x=\"-11058\" y=\"-11432\">\n            <label kind=\"invariant\" x=\"-11118\" y=\"-11483\">preSetInit(var, commitment)</label>\n            <committed/>\n        </location>\n        <location id=\"id50\" x=\"-12425\" y=\"-11296\">\n            <name x=\"-12484\" y=\"-11279\">loaded</name>\n        </location>\n        <location id=\"id51\" x=\"-10293\" y=\"-11101\">\n            <label kind=\"invariant\" x=\"-10250\" y=\"-11109\">preSaveFMU()</label>\n            <committed/>\n        </location>\n        <location id=\"id52\" x=\"-10192\" y=\"-11500\">\n            <label kind=\"invariant\" x=\"-10175\" y=\"-11526\">preDoStep(stepsize)</label>\n            <committed/>\n        </location>\n        <location id=\"id53\" x=\"-10345\" y=\"-11543\">\n            <label kind=\"invariant\" x=\"-10379\" y=\"-11585\">preGet(var)</label>\n            <committed/>\n        </location>\n        <location id=\"id54\" x=\"-11058\" y=\"-11305\">\n            <name x=\"-11143\" y=\"-11296\">Initialize</name>\n        </location>\n        <location id=\"id55\" x=\"-10549\" y=\"-11492\">\n            <label kind=\"invariant\" x=\"-10617\" y=\"-11551\">preSet(var, commitment)</label>\n            <committed/>\n        </location>\n        <location id=\"id56\" x=\"-10072\" y=\"-11305\">\n        </location>\n        <location id=\"id57\" x=\"-10387\" y=\"-11305\">\n            <name x=\"-10498\" y=\"-11330\">Simulation</name>\n        </location>\n        <init ref=\"id50\"/>\n        <transition>\n            <source ref=\"id38\"/>\n            <target ref=\"id37\"/>\n            <label kind=\"guard\" x=\"-9808\" y=\"-11339\">action == unload</label>\n            <label kind=\"synchronisation\" x=\"-9808\" y=\"-11322\">fmu[id]?</label>\n        </transition>\n        <transition>\n            <source ref=\"id54\"/>\n            <target ref=\"id54\"/>\n            <label kind=\"synchronisation\" x=\"-10965\" y=\"-11203\">actionPerformed?</label>\n            <label kind=\"assignment\" x=\"-10990\" y=\"-11169\">updateEnableActions(true)</label>\n            <nail x=\"-10914\" y=\"-11237\"/>\n            <nail x=\"-11016\" y=\"-11177\"/>\n        </transition>\n        <transition>\n            <source ref=\"id56\"/>\n            <target ref=\"id38\"/>\n            <label kind=\"guard\" x=\"-10030\" y=\"-11339\">action == freeInstance</label>\n            <label kind=\"synchronisation\" x=\"-9996\" y=\"-11296\">fmu[id]?</label>\n        </transition>\n        <transition>\n            <source ref=\"id41\"/>\n            <target ref=\"id57\"/>\n            <label kind=\"synchronisation\" x=\"-10693\" y=\"-11322\">actionPerformed!</label>\n            <label kind=\"assignment\" x=\"-10693\" y=\"-11322\">updateEnableActions(false)</label>\n        </transition>\n        <transition>\n            <source ref=\"id54\"/>\n            <target ref=\"id41\"/>\n            <label kind=\"guard\" x=\"-10965\" y=\"-11348\">action == exitInitialization</label>\n            <label kind=\"synchronisation\" x=\"-10939\" y=\"-11331\">fmu[id]?</label>\n        </transition>\n        <transition>\n            <source ref=\"id42\"/>\n            <target ref=\"id54\"/>\n            <label kind=\"synchronisation\" x=\"-11287\" y=\"-11330\">actionPerformed!</label>\n            <label kind=\"assignment\" x=\"-11287\" y=\"-11330\">updateEnableActions(true), initialize()</label>\n        </transition>\n        <transition>\n            <source ref=\"id45\"/>\n            <target ref=\"id42\"/>\n            <label kind=\"guard\" x=\"-11559\" y=\"-11356\">action == enterInitialization</label>\n            <label kind=\"synchronisation\" x=\"-11542\" y=\"-11331\">fmu[id]?</label>\n        </transition>\n        <transition>\n            <source ref=\"id39\"/>\n            <target ref=\"id45\"/>\n            <label kind=\"synchronisation\" x=\"-11771\" y=\"-11245\">actionPerformed!</label>\n            <nail x=\"-11660\" y=\"-11211\"/>\n        </transition>\n        <transition>\n            <source ref=\"id45\"/>\n            <target ref=\"id39\"/>\n            <label kind=\"guard\" x=\"-11533\" y=\"-11160\">action == setParameter</label>\n            <label kind=\"synchronisation\" x=\"-11516\" y=\"-11186\">fmu[id]?</label>\n            <nail x=\"-11507\" y=\"-11211\"/>\n        </transition>\n        <transition>\n            <source ref=\"id40\"/>\n            <target ref=\"id46\"/>\n            <label kind=\"synchronisation\" x=\"-12255\" y=\"-11169\">actionPerformed!</label>\n            <nail x=\"-12136\" y=\"-11211\"/>\n        </transition>\n        <transition>\n            <source ref=\"id46\"/>\n            <target ref=\"id40\"/>\n            <label kind=\"guard\" x=\"-11958\" y=\"-11152\">action == setParameter</label>\n            <label kind=\"synchronisation\" x=\"-11924\" y=\"-11211\">fmu[id]?</label>\n            <nail x=\"-11932\" y=\"-11203\"/>\n        </transition>\n        <transition>\n            <source ref=\"id43\"/>\n            <target ref=\"id45\"/>\n            <label kind=\"synchronisation\" x=\"-11779\" y=\"-11330\">actionPerformed!</label>\n        </transition>\n        <transition>\n            <source ref=\"id46\"/>\n            <target ref=\"id43\"/>\n            <label kind=\"guard\" x=\"-12000\" y=\"-11339\">action == setupExperiment</label>\n            <label kind=\"synchronisation\" x=\"-11992\" y=\"-11288\">fmu[id]?</label>\n        </transition>\n        <transition>\n            <source ref=\"id44\"/>\n            <target ref=\"id46\"/>\n            <label kind=\"synchronisation\" x=\"-12204\" y=\"-11330\">actionPerformed!</label>\n        </transition>\n        <transition>\n            <source ref=\"id50\"/>\n            <target ref=\"id44\"/>\n            <label kind=\"guard\" x=\"-12400\" y=\"-11339\">action == instantiate</label>\n            <label kind=\"synchronisation\" x=\"-12382\" y=\"-11305\">fmu[id]?</label>\n            <label kind=\"assignment\" x=\"-12382\" y=\"-11288\">\n                </label>\n        </transition>\n        <transition>\n            <source ref=\"id47\"/>\n            <target ref=\"id57\"/>\n            <label kind=\"synchronisation\" x=\"-10616\" y=\"-11237\">actionPerformed!</label>\n            <label kind=\"assignment\" x=\"-10582\" y=\"-11262\">restoreFMU(), updateEnableActions(false)</label>\n        </transition>\n        <transition>\n            <source ref=\"id57\"/>\n            <target ref=\"id47\"/>\n            <label kind=\"guard\" x=\"-10472\" y=\"-11058\">action == restore</label>\n            <label kind=\"synchronisation\" x=\"-10455\" y=\"-11092\">fmu[id]?</label>\n            <nail x=\"-10395\" y=\"-11092\"/>\n        </transition>\n        <transition>\n            <source ref=\"id57\"/>\n            <target ref=\"id57\"/>\n            <label kind=\"synchronisation\" x=\"-10608\" y=\"-11186\">actionPerformed?</label>\n            <label kind=\"assignment\" x=\"-10642\" y=\"-11143\">updateEnableActions(false)</label>\n            <nail x=\"-10446\" y=\"-11118\"/>\n            <nail x=\"-10540\" y=\"-11211\"/>\n        </transition>\n        <transition>\n            <source ref=\"id48\"/>\n            <target ref=\"id54\"/>\n            <label kind=\"synchronisation\" x=\"-11228\" y=\"-11237\">actionPerformed!</label>\n            <label kind=\"assignment\" x=\"-11245\" y=\"-11211\">getValue(var, commitment), updateEnableActions(true)</label>\n            <nail x=\"-11118\" y=\"-11245\"/>\n        </transition>\n        <transition>\n            <source ref=\"id54\"/>\n            <target ref=\"id48\"/>\n            <label kind=\"guard\" x=\"-10999\" y=\"-11228\">action == get</label>\n            <label kind=\"synchronisation\" x=\"-10990\" y=\"-11254\">fmu[id]?</label>\n            <nail x=\"-10999\" y=\"-11245\"/>\n        </transition>\n        <transition>\n            <source ref=\"id49\"/>\n            <target ref=\"id54\"/>\n            <label kind=\"synchronisation\" x=\"-11024\" y=\"-11432\">actionPerformed!</label>\n            <label kind=\"assignment\" x=\"-11016\" y=\"-11407\">setValue(var, commitment), updateEnableActions(true)</label>\n            <nail x=\"-10999\" y=\"-11373\"/>\n        </transition>\n        <transition>\n            <source ref=\"id54\"/>\n            <target ref=\"id49\"/>\n            <label kind=\"guard\" x=\"-11186\" y=\"-11449\">action == set</label>\n            <label kind=\"synchronisation\" x=\"-11160\" y=\"-11424\">fmu[id]?</label>\n            <nail x=\"-11118\" y=\"-11381\"/>\n        </transition>\n        <transition>\n            <source ref=\"id51\"/>\n            <target ref=\"id57\"/>\n            <label kind=\"synchronisation\" x=\"-10191\" y=\"-11152\">actionPerformed!</label>\n            <label kind=\"assignment\" x=\"-10183\" y=\"-11186\">saveFMU(), updateEnableActions(false)</label>\n            <nail x=\"-10191\" y=\"-11160\"/>\n        </transition>\n        <transition>\n            <source ref=\"id52\"/>\n            <target ref=\"id57\"/>\n            <label kind=\"synchronisation\" x=\"-10158\" y=\"-11466\">actionPerformed!</label>\n            <label kind=\"assignment\" x=\"-10149\" y=\"-11415\">doStep(stepsize), updateEnableActions(false)</label>\n            <nail x=\"-10132\" y=\"-11373\"/>\n        </transition>\n        <transition>\n            <source ref=\"id53\"/>\n            <target ref=\"id57\"/>\n            <label kind=\"synchronisation\" x=\"-10294\" y=\"-11551\">actionPerformed!</label>\n            <label kind=\"assignment\" x=\"-10362\" y=\"-11483\">getValue(var, commitment), updateEnableActions(false)</label>\n            <nail x=\"-10226\" y=\"-11517\"/>\n        </transition>\n        <transition>\n            <source ref=\"id57\"/>\n            <target ref=\"id51\"/>\n            <label kind=\"guard\" x=\"-10319\" y=\"-11169\">action == save</label>\n            <label kind=\"synchronisation\" x=\"-10319\" y=\"-11203\">fmu[id]?</label>\n        </transition>\n        <transition>\n            <source ref=\"id57\"/>\n            <target ref=\"id52\"/>\n            <label kind=\"guard\" x=\"-10277\" y=\"-11415\">action == step</label>\n            <label kind=\"synchronisation\" x=\"-10294\" y=\"-11390\">fmu[id]?</label>\n        </transition>\n        <transition>\n            <source ref=\"id57\"/>\n            <target ref=\"id53\"/>\n            <label kind=\"guard\" x=\"-10345\" y=\"-11509\">action == get</label>\n            <label kind=\"synchronisation\" x=\"-10362\" y=\"-11432\">fmu[id]?</label>\n        </transition>\n        <transition>\n            <source ref=\"id55\"/>\n            <target ref=\"id57\"/>\n            <label kind=\"synchronisation\" x=\"-10531\" y=\"-11509\">actionPerformed!</label>\n            <label kind=\"assignment\" x=\"-10481\" y=\"-11534\">setValue(var, commitment), updateEnableActions(false)</label>\n            <nail x=\"-10387\" y=\"-11492\"/>\n        </transition>\n        <transition>\n            <source ref=\"id57\"/>\n            <target ref=\"id55\"/>\n            <label kind=\"guard\" x=\"-10591\" y=\"-11432\">action == set</label>\n            <label kind=\"synchronisation\" x=\"-10540\" y=\"-11407\">fmu[id]?</label>\n        </transition>\n        <transition>\n            <source ref=\"id57\"/>\n            <target ref=\"id56\"/>\n            <label kind=\"guard\" x=\"-10225\" y=\"-11305\">action == terminate</label>\n            <label kind=\"synchronisation\" x=\"-10191\" y=\"-11279\">fmu[id]?</label>\n        </transition>\n    </template>\n    <system>\n        // Place template instantiations here.\n        MasterA = Interpreter();\n\n        //Max number of tries in the loops is upper bounded by the number of FMUs\n        loopS = LoopSolver(nFMU + 1);\n        finder = StepFinder(H_max + 1);\n        loop_solver_init = LoopSolverInit(nFMU + 1);\n\n\n        //The arguments to FMU is Id, numbers of outputs, number of inputs, definition of inputTypes\n        \n        msd2_fmu = FMU(msd2, msd2_output, msd2_input, msd2_inputTypes) ;\n        \n        msd1_fmu = FMU(msd1, msd1_output, msd1_input, msd1_inputTypes) ;\n        \n        msd3_fmu = FMU(msd3, msd3_output, msd3_input, msd3_inputTypes) ;\n        \n\n        // List one or more processes to be composed into a system.\n        system MasterA,\n        msd2_fmu,msd1_fmu,msd3_fmu,\n        loopS, finder, loop_solver_init;\n    </system>\n    <queries>\n        <query>\n            <formula>A[] not deadlock\n            </formula>\n            <comment>\n            </comment>\n        </query>\n        <query>\n            <formula>A&lt;&gt; MasterA.Terminated\n            </formula>\n            <comment>\n            </comment>\n        </query>\n    </queries>\n</nta>"
}