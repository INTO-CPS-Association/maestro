simulation
import FixedStep;
import FMI2;
import Math;
import Logger;
import Initializer;
@Framework("FMI2");
@FrameworkConfig("FMI2","@file: env.json");
{
real START_TIME = 0.0;
real END_TIME = 10.0;
real STEP_SIZE = 0.1;
bool global_execution_continue = true;
   	int FMI_STATUS_OK = 0;
  	int FMI_STATUS_WARNING = 1;
  	int FMI_STATUS_DISCARD = 2;
  	int FMI_STATUS_ERROR = 3;
  	int FMI_STATUS_FATAL = 4;
  	int FMI_STATUS_PENDING = 5;
Math math = load("Math");

FMI2 fmu1 = load("FMI2", "{967faced-4a63-40a2-9e14-ec5034821404}", "src/test/resources/pump.fmu");
FMI2 fmu2 = load("FMI2", "{921abe79-6885-4f4f-9663-4d7eb028d531}",  "src/test/resources/sink.fmu");
FMI2Component pump = fmu1.instantiate("m1", false, false);
FMI2Component sink = fmu2.instantiate("m2", false, false);
DataWriter dataWriter = load("DataWriter");
Logger logger = load("Logger");
FMI2Component components[2]={pump,sink};

bool global_execution_continue = true;
@Config("@file: config.json");
Initializer.expand initialize(components,START_TIME, END_TIME);

FixedStep.expand fixedStep(components,STEP_SIZE,START_TIME,END_TIME);

fmu1.freeInstance(pump);
fmu2.freeInstance(sink);

unload(fmu1);
unload(fmu2);
unload(dataWriter);
unload(logger);
unload(math);

}