simulation
import Initializer;
import JacobianStepBuilder;
import Math;
@Framework("FMI2");
@FrameworkConfig("FMI2","@file: env.json");
{
real START_TIME = 0.0;
real END_TIME = 10.0;
real STEP_SIZE = 0.001;

   	int FMI_STATUS_OK = 0;
  	int FMI_STATUS_WARNING = 1;
  	int FMI_STATUS_DISCARD = 2;
  	int FMI_STATUS_ERROR = 3;
  	int FMI_STATUS_FATAL = 4;
  	int FMI_STATUS_PENDING = 5;


Logger logger = load("Logger");
FMI2 m1 = load("FMI2", "{da03fa66-a02a-43d6-a906-db865e2ea044}", "src/test/resources/MassSpringDamper1.fmu");
FMI2 m2 = load("FMI2", "{9113a387-2c02-42ae-ae68-5073bf845034}",  "src/test/resources/MassSpringDamper2.fmu");
FMI2Component mi1 = m1.instantiate("mi1", false, false);;
FMI2Component mi2 = m2.instantiate("mi2", false, false);;
Math math = load("Math");


FMI2Component components[2]={mi1, mi2};

bool global_execution_continue = true;
int status = 0;

//@Config("@file: config.json");
//Initializer.expand initialize(components,START_TIME, END_TIME);

while( (global_execution_continue) )
{
    status = mi1.setupExperiment(false, 0.0, START_TIME, true, END_TIME);
    if( (status == 3 || status == 4) )
    {
            logger.log(4, "Setup Experiment Failed:  %d", status);
            global_execution_continue = false;
            break;
    }
    status = mi2.setupExperiment(false, 0.0, START_TIME, true, END_TIME);
    if( (status == 3 || status == 4) )
    {
            logger.log(4, "Setup Experiment Failed:  %d", status);
            global_execution_continue = false;
            break;
    }
    real realValueSize5[5] = { 1.0 , 1.0 , 1.0 , 0.0 , 1.0 };
    uint valRefsSize5[5] = { 0 , 1 , 2 , 3 , 4 };
    status = mi1.setReal(valRefsSize5, 5, realValueSize5);
    if( (status == 3 || status == 4) )
    {
            logger.log(4, "set failed %d", status);
            global_execution_continue = false;
            break;
    }
    real realValueSize7[7] = { 1.0 , 2.0 , 100.0 , 100.0 , 1.0 , 0.0 , 0.0 };
    uint valRefsSize7[7] = { 0 , 1 , 2 , 3 , 4 , 5 , 6 };
    status = mi2.setReal(valRefsSize7, 7, realValueSize7);
    if( (status == 3 || status == 4) )
    {
            logger.log(4, "set failed %d", status);
            global_execution_continue = false;
            break;
    }

    status = mi1.enterInitializationMode();
    status = mi2.enterInitializationMode();

    real realValueSize1[1] = { 0.0 };
    uint valRefsSize1[1] = { 7 };
    status = mi1.getReal(valRefsSize1, 1, realValueSize1);
    if( (status == 3 || status == 4) )
    {
            logger.log(4, "set failed %d", status);
            global_execution_continue = false;
            break;
    }

    real mi1SvValRef7 = realValueSize1[0];
    //realValueSize1[0] = mi1SvValRef7;
    realValueSize1[0] = 0.0;
    valRefsSize1[0] = 8;
    status = mi2.setReal(valRefsSize1, 1, realValueSize1);
    if( (status == 3 || status == 4) )
    {
            logger.log(4, "set failed %d", status);
            global_execution_continue = false;
            break;
    }

    valRefsSize1[0] = 6;
    status = mi1.getReal(valRefsSize1, 1, realValueSize1);
    if( (status == 3 || status == 4) )
    {
            logger.log(4, "set failed %d", status);
            global_execution_continue = false;
            break;
    }

    real mi1SvValRef6 = realValueSize1[0];
    //realValueSize1[0] = mi1SvValRef6;
    realValueSize1[0] = 0.0;
    valRefsSize1[0] = 9;
    status = mi2.setReal(valRefsSize1, 1, realValueSize1);
    if( (status == 3 || status == 4) )
    {
            logger.log(4, "set failed %d", status);
            global_execution_continue = false;
            break;
    }

    valRefsSize1[0] = 7;
    status = mi2.getReal(valRefsSize1, 1, realValueSize1);
    if( (status == 3 || status == 4) )
    {
            logger.log(4, "set failed %d", status);
            global_execution_continue = false;
            break;
    }

    real mi2SvValRef7 = realValueSize1[0];
    //realValueSize1[0] = mi2SvValRef7;
    realValueSize1[0] = 0.0;
    valRefsSize1[0] = 5;
    status = mi1.setReal(valRefsSize1, 1, realValueSize1);
    if( (status == 3 || status == 4) )
    {
            logger.log(4, "set failed %d", status);
            global_execution_continue = false;
            break;
    }

    status = mi1.exitInitializationMode();
    status = mi2.exitInitializationMode();
    break;
}

@Config("@file: jacobianconfig.json");
JacobianStepBuilder.expand fixedStepSize(components,STEP_SIZE,START_TIME,END_TIME);
m1.freeInstance(mi1);
m2.freeInstance(mi2);
unload(math);
unload(m1);
unload(m2);
unload(logger);
}